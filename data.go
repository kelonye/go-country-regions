// Code generated by go-bindata.
// sources:
// regions.json
// DO NOT EDIT!

package regions

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _regionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x58\xbd\x72\xdc\x3c\x0c\xec\xfd\x14\x9e\xab\xbf\x27\xf8\x3a\x89\x92\xa8\x3f\x52\x3c\x82\xd4\x59\x6a\x32\x1e\x57\x69\x52\x64\xdc\x65\xf2\xee\x19\xdf\x38\x19\xdf\x2e\x50\x12\x02\x40\x70\x09\x2c\x40\xfd\x7a\x7a\x7e\xbe\x34\xee\xf2\xff\xf3\x45\xb6\x5a\xc6\x6f\x4d\xe8\xf3\xe4\x9a\xcb\x7f\xf7\x0f\xdd\xc7\x87\xbe\xe6\x2d\xf5\x9f\x92\xfe\x43\xd2\xc8\xf4\x57\x63\x80\xb5\xff\x58\xc7\x2d\x93\xab\xc9\xfa\xb0\xd2\x1e\x01\x7c\x46\xcb\x74\xbb\x2b\x0e\x5f\x24\xd7\xbb\xe4\xc7\xfb\xeb\xcf\xb7\xf7\xef\x6f\xaf\x9f\xd2\x6c\x9d\x4f\xee\xea\x55\x4a\x6e\xd6\x7f\xdb\x15\x0a\xa8\x6a\x6a\x37\x2b\xaa\xf3\x31\xfc\xb6\x41\x7f\x6d\x6b\x98\xb6\x1d\x98\xf6\x64\x3a\xe0\x91\x5b\x4f\x3a\x23\x78\x99\xc8\x66\x26\x49\xb0\x42\x8a\xe0\x6c\x33\xb0\x6c\x2d\x90\x5b\xb1\x5c\x17\x70\x7d\xa3\xa8\x0e\x3a\xdb\x69\x38\x73\x8d\xf5\xc1\x3d\xee\xe2\x3a\xdc\xc5\x11\xa6\xce\x93\x64\xc4\x48\x1c\xa1\xea\x16\x25\x4d\xdc\x6a\xc0\xe2\x02\xd9\x03\xd4\xce\x82\xda\x25\xeb\xac\xd9\xfa\x50\xad\x0f\x3b\x45\xf1\x02\x51\x1c\xb0\x3e\x11\x89\x8e\xb2\xb4\xf3\x8f\x36\x1d\xe5\x5b\xb7\x90\x8d\x95\x81\xdd\x66\x7d\x38\xd1\x6b\x4f\xa5\xd6\x5b\xd4\xd6\x53\xd0\x3d\x5d\x7a\x3f\x92\x24\x93\x44\xc8\x4f\x21\x1d\x82\x6c\x98\x48\x32\x2b\xc9\x33\x2c\x46\xf4\x43\xd0\xb4\x37\x72\x9a\x49\xf2\x82\x12\xdf\x60\xb8\xbe\x25\x9d\xce\xb8\x02\x0f\xed\xc0\x0f\x46\xc0\x9e\x58\xca\x13\xb8\x9e\x40\xf1\xab\xb5\x2f\x15\x8f\x8f\x24\xb1\xaa\xc4\x5f\x49\x95\x70\xf2\xa2\x35\x12\x5f\x2c\x97\x5a\x87\xf0\xc4\x67\xfe\x30\xe0\x19\x97\x47\x1c\x47\xab\xe5\x8d\x14\xe9\x68\xc5\x34\x56\x54\x9d\x1c\x06\x34\x41\xc3\x99\xa8\x2a\xa6\x15\x34\x02\x69\x00\x6d\x4d\x1b\xac\xaf\xb0\xce\xb0\xa6\x0a\x9a\xa8\x03\xcf\x14\xd7\x6c\xd1\xc5\x0c\xdb\xcf\xe9\x71\xbd\xf4\x08\xc2\x02\x6c\xb5\x40\xff\x5c\x26\xe5\x72\x17\xca\xc0\xc5\xba\xb3\x05\x23\x00\x00\x96\x1b\xac\x0f\xcb\x11\x4c\x16\x6b\x03\xeb\x16\xd6\xce\x70\xb4\x52\xa5\xad\x90\x80\x2b\x11\xdd\x2a\x24\xa1\x6b\x5a\x29\xe5\xd6\x9d\x24\x07\xfa\x09\xc4\x40\xc1\xa1\x55\xa0\x49\x34\x50\x4a\x04\x22\xf0\x30\x2a\x37\x17\xa8\xf5\x84\x95\x0c\x61\x04\x0d\x90\xe3\x01\x92\x2c\x24\x6d\xa3\xab\x01\x7f\x20\x70\x83\x35\x23\x05\xc2\x38\x54\x32\xde\x21\x18\xe2\x9d\xf0\x62\xb9\x87\xe6\x1e\xa8\xa5\x46\xba\x9c\xe8\x94\xb3\x46\xaa\xaa\x38\x68\x6a\x74\x45\xd1\x7a\x17\x44\x7a\x17\x44\xea\x6f\x11\x2a\x2b\x66\x6d\x4f\x8d\x9b\xe3\xa9\x08\x37\xb8\xf5\x64\xcd\x94\xa9\x37\x78\x3c\x69\x87\x4e\x5e\x13\x02\xc9\x24\x28\xc0\x44\xc7\x4f\x16\xe3\xa5\xa8\xf9\xb7\x46\xc1\x24\xb0\x11\x65\x58\xba\x69\xfe\xac\xd6\x75\x05\x12\xca\x94\x09\x99\xee\x2d\x13\xe5\x67\x62\x8e\x4c\x59\x2c\xb0\x93\xb4\x4a\x9c\x42\x3d\x4e\x68\xe0\x17\xa2\x0e\x81\x16\x20\x34\x9c\x08\x51\xa6\xcc\x24\x21\x66\x11\x62\x16\xa1\xfe\x29\x34\xb9\x08\xbd\x6b\xc5\x7a\x5c\x09\x0d\x9b\x52\xe1\x28\xbb\x91\x08\x02\xb5\x2f\x54\xfb\x85\x6a\xbf\x58\x1d\xa5\x10\xc8\x65\xd0\x26\xa8\x42\x04\x50\xa0\x10\xca\x0c\x6b\xed\x55\x55\xa0\x52\x0b\x61\x58\x36\xcd\x0c\x3a\x6f\xb1\x66\xa7\xb2\x6b\xd6\xd0\xa7\x0b\x01\x56\xe9\xfd\x51\xe9\xbc\xd5\xa2\xfa\x6a\x55\x58\x85\xb6\xbf\x5b\x97\xb0\x5b\xb4\xb4\x5b\x7f\x65\x76\x8b\x7d\x77\x68\x78\xbb\x46\xa2\x37\x8d\xed\x6e\xda\x3f\x95\x03\xde\x09\x07\xa5\xed\x49\xb9\x76\xd2\x84\x75\x7e\xa5\x84\xa7\xdf\x4f\x7f\x02\x00\x00\xff\xff\x98\xf4\xf0\x6d\xbd\x12\x00\x00")

func regionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_regionsJson,
		"regions.json",
	)
}

func regionsJson() (*asset, error) {
	bytes, err := regionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "regions.json", size: 4797, mode: os.FileMode(420), modTime: time.Unix(1493145842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"regions.json": regionsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"regions.json": &bintree{regionsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

