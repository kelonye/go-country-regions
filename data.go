// Code generated by go-bindata.
// sources:
// regions.json
// DO NOT EDIT!

package regions

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _regionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x58\xcb\x6e\xdb\x3a\x10\xdd\xe7\x2b\x0c\xaf\xef\x17\xdc\x9d\x44\x49\xd4\x83\xa4\x68\x91\x92\x22\xed\x82\x20\x45\x03\xb4\x4d\xe1\x38\xab\xa2\xff\x5e\xc4\xe8\x23\x3e\x67\x66\x39\xa3\x79\x71\x1e\x67\xc6\xfe\x71\x77\x38\x1c\x8b\xea\xf8\xff\xe1\x58\xbf\x9d\x5f\xbe\x3f\x1d\xff\xbb\x72\xea\x77\x4e\xf1\xfa\xfc\xf0\x9b\x6e\x80\xb6\xef\x74\x78\x39\x5f\x3e\x1f\x8a\xaf\x4f\xe7\xe7\xc7\x3f\x1f\x3a\xed\x83\x23\x1f\x1e\x6c\x06\x4d\x75\xbc\x0a\x7e\xfa\xc0\x39\x5d\x39\xdf\x2e\x0f\xe7\xc7\xcb\x3f\xee\xf4\xce\x4d\x2f\x6f\x64\x20\x5d\xc5\xdf\x5e\x2f\xe7\x87\x2f\x7f\xdd\x65\x0a\x68\x96\xc4\x56\x2d\xaa\xfd\x36\xfc\xb2\x40\x7b\x65\xa9\xa8\x96\x15\xa8\xd6\xa4\xda\xe0\x93\x4b\x4b\x32\x2d\x58\xe9\x48\xa7\x27\x8e\xd7\x42\x0a\x60\x6c\x54\x72\x59\x6a\x49\x2e\x93\x66\x3a\x83\xe9\x95\xa2\xda\xe8\x6d\xbb\x62\xcc\x14\xda\x07\x73\xeb\xc5\x54\xe8\xc5\x50\x4e\x8d\x25\x4e\x8b\x91\x18\xca\xaa\x19\x84\x36\x31\x4e\x49\x8b\xf1\xa4\x0f\xa9\x36\x5a\xaa\xcd\xa4\xbd\x75\xd6\x3e\x2c\xe4\xec\x1e\x9c\x6d\x40\xef\xf8\xe0\x8a\x9a\xb1\xa2\x36\xaa\x06\x92\xd1\x1a\xab\x1a\xb5\x0f\x3b\x5a\xad\x8d\x92\x88\x9a\x42\xaa\xa9\x72\x75\x4b\x9c\x89\x38\x89\xec\x64\x94\x69\x3a\x94\x69\x7a\xa1\xde\xcd\xa0\xc4\xda\x78\x49\x7a\x24\xa3\x13\x72\x6c\x81\xa1\xd8\x92\x64\x2a\x25\x99\x16\xf0\xda\x36\x4a\x78\x96\x60\xc4\x52\xe2\x2c\xa5\xc0\x3a\xcd\x2f\x75\xb7\x0d\xc4\x89\x9a\xf2\x89\x44\x39\x2b\x49\x42\x7a\x9b\x35\x93\x12\x84\x5b\x02\x1c\xbb\x29\xe9\x69\x87\xdb\x3c\xb6\xda\x4e\x6a\x29\xd2\x56\x8b\xa9\x9d\x51\xb4\x03\xfc\xef\xa8\xbf\x3b\x07\x12\x9e\x24\x00\x45\xba\x11\xe8\x13\xd0\x13\xd0\x34\x0b\x1d\x2d\xc4\x9e\xe2\xea\xb5\x31\xef\xc1\x7d\x1f\x6f\xe9\xa1\xc6\x1a\x0c\x16\x24\x60\x9d\x0d\x9d\x50\xca\x81\xfa\x6d\xd0\x2a\x34\x60\x04\x90\x80\x61\x05\x7a\xd3\x0c\xc1\xa2\x77\x05\xd0\x25\xd0\x46\x31\xe4\x68\xae\x1c\xb4\x9b\x23\xc8\x72\x89\x38\x54\x26\x47\x0d\xe6\x16\xe2\x6c\x68\xc7\x13\xde\x78\x83\x5a\x9e\x0e\x43\x4f\x2d\xe1\x09\x8a\x7d\x2b\x54\xce\xd3\xca\xf0\x8e\x14\xe1\x22\xf4\xd0\xe3\x1e\x9a\xcc\x47\xc9\xd1\x49\x49\xbf\xa7\xe4\x7a\xed\x64\xf1\x94\x63\x3f\x93\xf2\x02\xc1\x10\xca\xf8\x7b\xcd\x3c\x2c\x61\x4f\xab\x30\x50\x71\x82\x11\xde\x1a\x68\xaa\x42\x23\x89\x51\x89\x82\x76\xa6\x07\x3a\xd3\x03\xed\xae\x00\x93\x15\x26\xc9\xa7\x84\xc4\x61\x17\x98\x23\x54\x3d\x6a\x27\x5e\xac\x15\xd4\x8e\xd2\xa3\xa3\x95\x98\x00\x32\x11\x06\x30\xd2\xf3\xa3\x86\x78\x31\x48\xf6\xb5\x93\x2d\x26\x70\x44\x1d\x16\x57\xc9\x9e\xb6\xa8\x4e\x00\x42\x13\x75\xc2\x44\x75\x9b\x08\xf2\x27\x42\x8e\x89\xba\x38\x81\xa7\x54\x0a\x71\x26\x43\x6a\x74\x7f\x27\x82\x8e\x04\x2b\x20\xd1\x29\x92\x08\x32\x53\x4f\x1c\x42\x96\x44\xc8\x92\x68\x7f\x26\xba\x53\x12\xfd\xcc\x4c\xda\x6f\x9d\x44\x67\x63\x5a\x94\xc2\x27\x98\xf5\x44\xb3\x9e\xb5\x7d\x91\x29\x85\xb9\x91\xae\xa1\x4c\xe3\x9d\xa1\xcd\x73\x0f\xb4\xf4\x13\x26\xc3\x1c\x66\xca\x50\x1e\x25\x35\xd8\xab\x59\xbb\x83\xf2\x22\x69\xc3\x16\xce\x94\x9e\x99\x7e\x57\xcf\xf4\xde\x59\x03\xf2\x59\x9b\x9f\x19\x96\xfa\xa2\x15\x61\xd1\x40\x67\xd1\xfe\x02\x59\x34\x6c\x5d\x60\x9d\x2d\x12\x44\xae\x12\x96\xad\xd2\x1f\x18\x1b\xdc\xfc\x1b\x35\xe5\x4e\x5b\x64\xa7\xfb\x69\xff\x38\xf0\x77\x3f\xef\x7e\x05\x00\x00\xff\xff\x29\x5d\x32\x7c\x11\x12\x00\x00")

func regionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_regionsJson,
		"regions.json",
	)
}

func regionsJson() (*asset, error) {
	bytes, err := regionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "regions.json", size: 4625, mode: os.FileMode(420), modTime: time.Unix(1475704100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"regions.json": regionsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"regions.json": &bintree{regionsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

