// Code generated by go-bindata.
// sources:
// regions.json
// DO NOT EDIT!

package regions

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _regionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x58\xbb\x72\xdc\x3a\x0c\xed\xfd\x15\x9e\xad\xef\x17\xdc\x4e\xa2\x24\xea\x41\x52\x5c\x82\xd2\x5a\x6a\x32\x1e\x57\x69\x52\x64\xdc\x65\xf2\xef\x19\xef\x38\x19\xef\x39\x40\x09\x08\x2f\xe2\x71\x80\xdd\x5f\x4f\xcf\xcf\x97\xa6\xbb\xfc\xff\x7c\xe9\xb7\xb2\xe6\xfe\xf2\xdf\x9d\xd3\x7f\x70\x1a\x99\x9a\x4f\x7a\x00\xda\x7f\xd0\x69\x2d\x75\xfc\xd6\xc4\xbe\x4c\xee\xef\x87\xc9\xfa\x10\xc8\x47\x04\x9b\xc9\x52\x5d\xef\x82\xc3\x17\xce\xf5\xce\xf9\xf1\xfe\xfa\xf3\xed\xfd\xfb\xdb\xeb\x27\xb7\x7c\x70\x65\xdd\xc8\x80\xdc\xc5\x37\xa9\xa5\x09\xff\xdc\x55\x0a\x68\xd3\xc4\x6e\x56\x54\xe7\x63\xf8\x6d\x83\xf6\xda\xd6\x50\x6d\x3b\x50\xed\x49\x75\xc0\x27\xb7\x9e\x64\x46\xb0\x32\x91\xce\x4c\x9c\x68\x85\x94\xc0\xd8\x6a\xe4\xb2\xb5\x92\xdc\x8a\x65\xba\x82\xe9\x1b\x45\x75\xd0\xdb\x4e\xc3\x98\x6b\xac\x0f\xee\xd1\x8b\xeb\xd0\x8b\xa3\x9c\x3a\x4f\x9c\x11\x23\x71\x94\x55\xb7\x28\x6d\xe2\x82\x91\x16\x17\x49\x1f\x52\xed\xac\x54\xbb\x62\xbd\x75\xb3\x3e\xec\xe4\xec\x05\x9c\x1d\x40\x9f\xf8\xe0\x8e\x9a\xb1\xa3\x36\xea\x16\x92\xb1\x1a\xab\x5b\xad\x0f\x27\x5a\xed\x9d\x91\x88\x9e\x42\xea\xa9\x72\xfd\x48\x9c\x42\x1c\x21\x3b\x15\x65\x86\x09\x65\x86\x59\xa9\xf7\xb0\x18\xb1\x0e\x51\x93\x5e\xc9\x68\x41\x8e\x6f\x30\x14\xdf\x92\x4c\x67\x24\xd3\x03\x5e\xfb\xc1\x08\xcf\x13\x8c\x78\x4a\x9c\xa7\x14\xf8\x60\xf9\xa5\xee\xf6\x89\x38\xd9\x52\xbe\x92\x28\x67\x45\x34\xa4\xf7\xd5\x32\xa9\x41\xb8\x27\xc0\xf1\x87\x91\x9e\x71\x79\xcc\xe3\x68\xed\xa4\x91\x22\x1d\xad\x98\xc6\x0d\x45\x27\xc0\xff\x89\xfa\x7b\x0a\x20\x11\x49\x02\x50\x64\x5a\x81\xbe\x02\x5d\x80\xa6\x59\x98\x68\x21\xce\x14\xd7\x6c\x8d\xf9\x0c\xee\xe7\xfc\x48\x2f\x3d\xd6\x60\xf1\x20\x01\xeb\x6c\x99\x94\x52\x2e\xd4\x6f\x8b\x55\xa1\x05\x23\x80\x04\x2c\x37\xa0\x0f\xcb\x10\x2c\xfa\xd0\x00\xdd\x02\xed\x0c\x43\x81\xe6\x2a\x40\xbb\x05\x82\xac\x20\xc4\xa1\x32\x05\x6a\xb0\xb0\x13\xe7\x40\x3b\x91\xf0\x26\x3a\xd4\x8a\x74\x18\x46\x6a\x89\x48\x50\x1c\x47\xa5\x72\x91\x56\x46\x0c\xa4\x08\x17\x61\x84\x1e\x8f\xd0\x64\x31\x6b\x8e\xae\x46\xfa\x23\x25\x37\x5a\x27\x4b\xa4\x1c\xc7\x8d\x94\x77\x08\x86\x50\x26\xbe\x58\xe6\x61\x09\x47\x5a\x85\x89\x8a\x93\x9c\xf2\xd6\x44\x53\x95\x06\x4d\x8c\x4a\x94\xac\x33\x3d\xd1\x99\x9e\x68\x77\x25\x98\xac\x54\x34\x9f\x1a\x12\xa7\x53\x61\xae\x50\xf5\x6c\x9d\x78\xb9\x37\x50\x3b\x6b\x8f\xce\x5e\x63\x02\xc8\x64\x18\xc0\x4c\xcf\xcf\x16\xe2\xe5\xa4\xd9\xb7\x4e\xb6\x2c\xe0\x88\x3a\x2c\xdf\x34\x7b\xd6\xa2\xba\x02\x08\x15\xea\x84\x42\x75\x2b\x04\xf9\x85\x90\xa3\x50\x17\x0b\x78\x92\x56\x89\x53\x1c\xa9\xd1\xfd\x2d\x04\x1d\x02\x2b\x40\xe8\x14\x11\x82\x4c\x99\x89\x43\xc8\x22\x84\x2c\x42\xfb\x53\xe8\x4e\x11\xfa\x99\x29\xd6\x6f\x1d\xa1\xb3\x51\x76\xa3\xf0\x02\xb3\x2e\x34\xeb\xd5\xda\x17\x95\x52\x58\x07\xed\x1a\xaa\x34\xde\x15\xda\xbc\xce\x40\x6b\x3f\x61\x2a\xcc\x61\xa5\x0c\xd5\x55\x53\x83\xbd\x5a\xad\x3b\xa8\xee\x9a\x36\x6c\xe1\x4a\xe9\xd9\xe8\x77\xf5\x46\xef\xdd\x2c\x20\xdf\xac\xf9\xd9\x60\xa9\xef\x56\x11\x76\x0b\x74\x76\xeb\x2f\x90\xdd\xc2\xd6\x1d\xd6\xd9\xae\x41\xe4\x4d\xc3\xb2\x9b\xf6\x07\xc6\x01\x37\xff\x41\x4d\x79\xd2\x16\x39\xe9\x7e\x3a\xbf\x0e\xfc\xd3\xef\xa7\x3f\x01\x00\x00\xff\xff\x8d\xb3\x80\xb7\x11\x12\x00\x00")

func regionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_regionsJson,
		"regions.json",
	)
}

func regionsJson() (*asset, error) {
	bytes, err := regionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "regions.json", size: 4625, mode: os.FileMode(420), modTime: time.Unix(1475713017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"regions.json": regionsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"regions.json": &bintree{regionsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

